on:
  workflow_call:
    inputs:
      role_name:
        required: true
        type: string
      role_session_name:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: eu-central-1
      working_directory:
        required: true
        type: string
      function_name:
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write
  statuses: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 15

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        id: aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ inputs.role_name }}
          role-session-name: ${{ inputs.role_session_name }}
          aws-region: ${{ inputs.aws_region }}
      - name: Build lambdas
        run: make lambda
        env:
          GITHUB_TOKEN: ${{ secrets.GB_TOKEN_PRIVATE }}
          GOPRIVATE: "github.com/vimeda/*"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: order-srv-lambdas
          path: ${{ github.workspace }}/dist/*

      - uses: actions/download-artifact@v2
        id: download
        with:
          name: order-srv-lambdas
          path: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ${{ steps.download.outputs.download-path }}

      - name: Push function to Bucket
        run: cd   ${{ github.workspace }}/dist && aws s3 cp  ${{ inputs.function_name }}_lambda.zip s3://staging-lykon-lambdas/${{ inputs.function_name }}/function.zip

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        id: init
        run: terraform -chdir=configs/crossplane/staging init

      - name: Terraform plan
        id: plan
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=$(pwd)/kubeconfig.yaml
          terraform -chdir=configs/crossplane/staging plan -input=false
        env:
          TF_WORKSPACE: staging

      - name: Terraform apply
        id: apply
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=$(pwd)/kubeconfig.yaml
          terraform -chdir=configs/crossplane/staging apply -auto-approve -input=false
        env:
          TF_WORKSPACE: staging
